IPC: Code di messaggi
/-----------------------------------------------------------------------\

SystemV IPC è l'etichetta utilizzata per l'interprocess communication:

1>-Le code di messaggi(mess. tra processi, simili ai PIPE) diverse dai PIPEs per 2 motivi;
    a-Confini dei messaggi sono delimitati da unità di messaggi, non da stream di byte
    b-Ogni messaggio contiene un membro type di tipo intero, potendo sceglierli per tipo

2>-I semafori permettono a molteplici processi di sincronizzare le proprie azioni.
    -Un semaforo è un valore intero mantenuto dal kernel(visibile a tutti i processi)
    -Un processo indica che sta facendo un'azione modificando il valore al semaforo

3>-La memoria condivisa consente di condividere lo stesso segmento di memoria
    -una volta che un processo ha aggiornato la memoria condivisa, la modifica è subito
        visibile da altri processi
    -

Creazione/apertura
/-----------------------------------------------------------------------\

Ogni meccanismo delle SystemV IPC associa una -System call get-(msgget(), semget() o shmget())
    -è l'analogo delle system call -open()-

Data una key intera la chiamata get:
    -crea un nuovo oggetto IPC con la key indicata e returna un identificatore univoco
    -returna l'identificatore di un oggetto IPC esistente a quella key

Creating/opening a System V IPC object
/-----------------------------------------------------------------------\

Ogni processo che vuole accedere allo stesso oggetto IPC esegue una call -get-
    e specifica la stessa key

Se non esiste un oggetto IPC corrispondente alla key, con specifica -IPC_CREAT-, la get crea un
    nuovo processo IPC

UN processo può garantire di essere il creator di un oggetto IPC specificando il flag -IPC_EXCL-
    -Se IPC-EXCL è specificato e l'oggetto IPC corr. alla key esiste già, la get fallisce
        con l'errore EEXIST

Cancellazione di oggetti IPC
/-----------------------------------------------------------------------\

Per cancellare un oggetto IPC si utilizza -IPC_RMID-
    -Per le code di messaggi e i semafori, la cancellazione 
        degli oggetti IPC è immediata,

La cancellazione di oggetti legati alla memoria condivisa ha un diverso comportamento:
    -la chiamata shmctl(id IPC_RMID, NULL), il segm. di memoria cond. è rimosso quando tutti
        i processi che lo usano staccano
    
Persistenza degli oggetti IPC
/-----------------------------------------------------------------------\

Gli oggetti IPC hanno una kernel persistence, continuano ad esistere finchè sono esplicitamente cancellati
    -vantaggi:  creare un oggetto, modificarne lo stato e uscire.
   
    -svantaggi: limiti di sistema sul massimo numero di ogg. IPC di ogni tipo
                il kernel non tiene conto di quanti processi hanno un oggetto aperto

IPC Keys
/-----------------------------------------------------------------------\

Le keys dei meccanismi IPC di SystemV sono valori interi rappresentati con il tipo  key_t
La chiamata -get- mappa una key sul corrispondente identificatore IPC intero
    -queste call garantiscono che se creiamo un nuovo oggetto, quell'oggetto
        abbia un identificatore unico
    -se specifichiamo la key di un oggetto esistente otteniamo sempre lo stesso 
        identificatore per quell'oggetto4

Come generare una -key- unica (senza incroci con identificatori a IPC esistenti)
    -Scelta casuale di un valore intero, tipicamente memorizzato in un header file
    -Utilizzo della costante IPC_PRIVATE come valore della key, che prod. ogg. con chiave unica
    -Utilizzo funzione ftok() per generare una key "molto probabile" unica

>-IPC_PRIVATE
    -molto utile in appl. con molti processi in cui il padre crea l'oggetto IPC prima di inserire la fork()
    -possibile usare anche in appl. client-server (per processi nno collegati), 
        ma i client devono avere un mezzo per ottenere gli identificatori IPC
>-ftok()
    -valore di key generato dal pathname fornito e dal proj per mezzo di algoritmo
    -ftok() utilizza il numero i-node piuttosto che il file name
        -il file non dovrebbe essere rimosso e ricreato mentre l'app è in esec. perchè
            è probabile che sia ricreato con un diverso numero i-node
    -consente di generare diverse key a partire dallo stesso file

Associated Object Permissions
/-----------------------------------------------------------------------\

Il kernel mantiene una struttura dati per ogni istanza di un oggetto IPC_CREAT
La stuttura dati associata a un oggetto IPC è inizializzata per mezzo della system call get
    -una volta creato il progr. può ottenere una copia con -syscall ctl- specificando IPC_STAT

Il campo mode della sottostruttura ipc_perm contiene permessi per oggetto IPC. 
    -permessi inizializzati con i 9bit più bassi
Come con i file, i permessi sono divisi in tre categorie: "owner", "group" e "other"

Comandi ipcs and ipcrm
/-----------------------------------------------------------------------\

Di default -ipcs- visualizza la key l'identificatore, l'owner, e i permessi (espressi in ottale)
    -per la mem. cond. -ipcs- visualizza la dimensione della regione cond., il num di proc.
        che attualente hanno la regione attaccata ai propri spazi di indirizzi e dei flag di stato
    -per i semafori, -ipcs- visualizza la dimensione del set di semafori
    -per le code di messaggi, -ipcs- visualizza il numero totale di byte di dati e il num. di mess. 
        presenti nella coda
Il comando -ipcrm- cancella un oggetto IPC object.
    -specifichiamo key (o l'identificatore id), e la lettera "X"(oppure x)
        .è una "q" per le messages queques
        .da una "s" per i semaphores
        .da una "m" per la shared memory

Code di messaggi
/-----------------------------------------------------------------------\

Sono un canale di comunicazione su cui possono affacciarsi più processi che inviano e ricevono messaggi
Le code di messaggi differiscono da pipe e FIFO per questo:
    1-l'identificativo utilizzato per riferirsi a una coda di messaggi è l'identificatore returnato da una call 
        a msgget()
    2-La comunicazione per mezzo di code di messaggi è "message-oriented"(lettore riceve messaggi interi)
    3-Non è possibile leggere porzioni di messaggi, lasciando altre porzioni in coda o leggere più messaggi
        in coda
    4-Ogni messaggi contiene un membro di tipo intero che permette di prelevare i messaggi dalla coda FIFO

Creazione/apertura una coda di messaggi
/-----------------------------------------------------------------------\

L'argomento key è una chiave generata utilizzando un numero casuale, IPC_PRIVATE o ftok()
L'argomento msgflg è una maschera di bit che specifica i permessi da associare a una new message queue

-msgflg- argument
/-----------------------------------------------------------------------\

zero o più fra i seguenti flag possono essere concatenati in OR(|) nel -msgflg- per controllare la msgget():
    -IPC_CREAT se non esiste una coda con la key specificata, crea una nuova coda
    -IPC_EXCL se è presente anche IPC_CREAT e una coda con la key specificata esiste già, returna un falliment
        con errore EEXIST

-msgget()- system call
/-----------------------------------------------------------------------\

La system call mssgget() inizia cercando all'interno delle code di messaggi esistenti quella con la key specificata
    -se quella key corrisponde a una coda, la -mssgget()- returna l'identificatore di quella coda 
    -se la coda non esiste e IPC_CREAT è specificato, la msgget() crea una nuova coda e returna
        l'identificatore al chiamante

Condivisione della key
/-----------------------------------------------------------------------\

La Condivisione della key poò avvenire in diversi modi:
    -in un file di definizioni "f_header.h" incluso da tutti i processi che devono usare la stessa coda
        #define MYKEY   1234
    -il processo responsabile per l'allocazione della coda eseguirà:
        int q_id = msgget(MYKEY, IPC_CREAT | 0644);
    -un processo che deve usare la coda associata a MYKEY eseguirà una call come:
        int q_id = msgget(MYKEY, 0);
    -Se la coda associata a MYKEY esiste, viene restituito il suo identificatore, 
        altrimenti viene restituito -1

Exchanging Messages
/-----------------------------------------------------------------------\

Le system call msgsnd() e msgrcv() eseguono le operazioni di I/O sulle code di messaggi
    -il primo argomento in entrambe la call è un identificatore di coda di messaggi
    -il secondo argomento è un puntatore a una struttura definita dal programmatore e utilizzata per
        contenere il messaggio inviato o ricevuto
        