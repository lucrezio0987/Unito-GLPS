------------------------------------------------------------------------------------------------------------------------------------------
SEGNALI
    Un segnale è una notifica a un processo che è occorso un certo evento
    - ECCEZIONE HARDWARE: l'HW ha verificato una condizione di errore che è stata notificata al kernel
      Es. divisioni per 0, istruzioni malformate, riferimenti a parti di memoria inaccessibili
    - L'utente ha digitato caratteri speciali che generano segnali
      Es. Ctrl-C e Ctrl-Z
    - EVENTO SOFTWARE: l'input è divenuto disponibile su un descrittore, un timer è arrivato a 0,
      il tempo per il processo è stato superato, il figlio del processo è terminato

    I segnali sono definiti con interi unici, la cui sequenza inizia da 1.  Tali interi sono definiti in  
    <signal.h> (o in <sys/signal.h>) con nomi simbolici della forma SIGxxxx.

    Si dice che un segnale è generato da qualche evento. Dopo essere stato generato, un segnale è inviato
    ad un processo, che quindi esegue una qualche azione in risposta al segnale. Fra il momento in cui è 
    generato e il momento in cui è inviato al processo, il segnale è pendente

    Un segnale pendente è inviato a un processo appena il processo è scelto per l'esecuzione, oppure 
    immediatamente se il processo è già in esecuzione. A volte è necessario assicurare che un segmento di
    codice non sia interrotto dalla consegna di un segnale: in questo caso, possiamo aggiungere un segnale 
    alla maschera dei segnali di processo, cioè si blocca la ricezione. Se un segnale è generato mentre il 
    processo è bloccato, il segnale rimane pendente fino a quando non viene sbloccato e rimosso dalla maschera

    Al momento della ricezione di un segnale, un processo continua con una delle seguenti azioni di default
    - IL SEGNALE è IGNORATO: viene scartato dal kernel e non ha effetti sul processo
    - IL PROCESSO VIENE TERMINATO (killed)
    - E' GENERATO UN FILE CONTENENTE UN CORE DUMP FILE: un file con core dump contiene un'immagine della 
      memoria virtuale del processo
    - IL PROCESSO VIENE BLOCCATO: l'esecuzione è in questo caso sospesa
    - L'ESECUZIONE è RIPRESA: dopo essere stata bloccata in precedenza

    - TRAP: segnali generati da eventi prodotti da un processo e inviati al processo stesso.
      Alcune trap sono causate da comportamenti errati del processo stesso (divisione per zero)
    - INTERRUPT: segnali inviati ad un processo da un agente esterno: l'utente o un altro processo

    Invece di accettare l'azione di default per un particolare segnale, un programma può modificare l'azione da 
    intraprendere al momento della consegna del segnale. Un programma può impostare una delle seguenti disposizioni:
    - L'AZIONE DI DEFAULT: Utile per cancellare precedenti modifiche della disposizione del segnale
    - IL SEGNALE E' IGNORATO: Utile per un segnale la cui disposizione sarebbe quella di terminare il processo
    - SIGNAL HANDER: E' una funzione scritta dal programmatore, che esegue azioni appropriate in risposta al segnale:
      - Per esempio la shell ha un gestore per il segnale SIGINT che causa il suo blocco 
      - Installare o stabilire un signal handler significa notificare al kernel che deve essere invocata una handler
      - Quando un handler è invocato in risposta alla ricezione di un segnale, si diche che il segnale è stato gestito/intercettato

    SIGABRT: Un processo riceve questo segnale quando invoca la funzione abort(). Di default questo segnale termina il processo
    SIGALRM: Il kernel genera questo segnale al momento del raggiungimento dello zero di un timer impostato da una chiamata ad alarm()
    SIGCHLD: Segnale inviato dal kernel a un processo genitore quando uno dei figli termina
    SIGCONT: Quando viene inviato a un processo bloccato, questo segnale causa il risveglio del processo
    SIGINT: Quando l'utente digita il carattere di interrupt, il terminale invia questo segnale al gruppo del processo in foreground
    SIGKILL: E' il segnale sicuro di kill. Non può essere bloccato, ignorato o intercettato da un handler
    SIGPIPE: Segnale generato quando un processo tenta di scrivere su un pipe o un FIFO per il quale non c'è un processo lettore corrispondente
    SIGSEGV: Generato quando un programma tenta un riferimento in memoria non valido. Può essere non valido perchè la pagina riferia non esiste
             oppure il processo ha tentato di accedere a una parte della memoria del kernel
    SIGSTOP: Segnale per il blocco sicuro, non può essere bloccato, ignorato o intercettato
    SIGTERM: Segnale standard utilizzato per terminare un processo; inviato di default a SIGKILL
    SIGTRAP: Segnale utilizzato per implementare i breakpoint
    SIGTSTP: Segnale per lo stop, inviato per bloccare il gruppo di processi in foreground quando l'utente digita il carattere CTRL-Z
------------------------------------------------------------------------------------------------------------------------------------------
CHANGING SIGNAL DISPOSITION: signal()

#include <signal.h>
void (*signal(int sig, void (*handler)(int)) ) (int); 

    - il primo argomento, sig, identifica il segnale di cui vogliamo modificare la disposizione
    - il secondo argomento, handler, è l'indirizzo della funzione che dovrebbe essere chiamata quando questo segnale è inviato
    - il valore di ritorno di signal() è la precedente disposizione del segnale

    Se la disposizione è settata a SIG_IGN, il segnale è ignorato
    Se la disposizione è settata a SIG_DFL, l'azione di default è associata con il segnale
    -> signal(SIGTERM, SIG_DFL)

SIGNAL HANDLERS
    Un signal handler è una funzione chiamata quando un processo riceve uno specifico segnale
    L'invocazione di un handler può interrompere il flusso principale del programma in qualsiasi momento
------------------------------------------------------------------------------------------------------------------------------------------
SENDING SIGNALS: kill()

#include <signal.h>
int kill(pid_t pid, int sig);

    L'argomento pid identifica uno o più processi a cui inviare il segnale:
    - pid > 0   : il segnale è inviato al processo identificato al pid
    - pid == 0  : il segnale è inviato a ogni processo nello stesso gruppo del chiamante
    - pid < -1  : il segnale è inviato a tutti i processi nel gruppo del processo il cui ID è uguale al valore assoluto di pid
    - pid == -1 : il segnale è inviato a tutti i processi per i quali il processo ha i permessi di inviare un segnale, eccetto init

    Se nessun processo corrisponde al pid predefinito, kill() fallisce e setta errno a ESRCH
    Verifica dell'esistenza di un processo. Se l'argomento sig è settato a 0 non è inviato alcun segnale
------------------------------------------------------------------------------------------------------------------------------------------
SIGACTION() system call 

#include <signal.h> 
int sigaction(int signum, const struct sigaction *act, struct sigaction *oldact);

    syscall utilizzata per impostare un gestore di segnali
    - signum: numero del segnale da gestire
    - act: puntatore al nuovo gestore del segnale, se NULL il gestore rimane invariato
    - oldact: puntatore al vecchio gestore, se NULL non viene restituito alcun handler

#include <signal.h> 
struct sigaction {
    void (*sa_handler)(int signum); 
    sigset_t sa_mask;
    int sa_flags;
};
    sa_handler: puntatore alla funzione per la gestione del segnale
    sa_mask: maschera dei segnali bloccati durante l'esecuzione dell'handler
    sa_flags: insieme di flag messi in bitwise OR per modificare il comportamento del segnale

    La collezione di segnali attualmente bloccati è chiamata 'signal mask'
    Quando un nuovo processo è creato, eredita la maschera del genitore

    Quando un segnale è inviato a un processo durante l'esecuzione di un handler, il segnale è
    automaticamente bloccato fino a quando l'handler restituisce
    La maschera è la collezione di segnali attualmente blocked. Le maschere sono di tipo sigset_t 

    La maschera è la collezione di segnali attualmente blocked
    Le maschere sono di tipo sigset_t. Le funzioni per la manipolazione sono: 
    - int sigemptyset(sigset_t *set);
    - int sigfillset(sigset_t *set);
    - int sigaddset(sigset_t *set, int signum);
    - int sigdelset(sigset_t *set, int signum);
    - int sigismember(const sigset_t *set, int signum);

#include <signal.h> 
int sigprocmask(int how, const sigset_t *set, sigset_t *oldset);
    
    Per impostare la maschera di segnali bloccati durante l'esecuzione dei processi si usa la syscall sigprocmask()
    l'argomento how può assumere i seguenti valori:
    - SIGBLOCK: i segnali nel set sono bloccati
    - SIG_UNBLOCK: i segnali nel set sono rimossi dalla maschera esistenti
    - SIG_SETMASK: il set diventa la nuova maschera del segnale
    oldset è la vecchia maschera

    - All'arrivo (asincrono) di un segnale
        1. lo stato del processo è salvato 
        2. la funzione dell'handler è eseguita
        3. lo stato del processo è restored
    - Per i processi in attesa su wait(), o sospesi con pause() o sleep() sono possibili 2 comportamenti:
        1. il processo non è in esecuzione
        2. la funzione dell'handler è eseguita normalmente
    - Quando l'handler ritorna:
        1. la syscall restituisce un errore con errno settato a EINTR oppure
        2. la syscall viene automaticamente ripresa
    
    L'handler deve essere associato al corrispondente segnale prima che il segnale possa essere ricevuto dal processo
    


    


    